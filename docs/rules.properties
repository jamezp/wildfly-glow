org.wildfly.rule.add-on=Tag a layer as being an add-on in a family
org.wildfly.rule.add-on.value=Family,name. e.g.: `management,wildfly-cli`
org.wildfly.rule.add-on-cardinality=Max number of add-ons enabled in the family
org.wildfly.rule.add-on-cardinality.value=An integer. e.g.: `1`
org.wildfly.rule.add-on-depends-on=Layers expected to be discovered for the add-on to be proposed
org.wildfly.rule.add-on-depends-on.value=Can be one of `all-dependencies,none,only:<list of layers>`
org.wildfly.rule.add-on-description=The description
org.wildfly.rule.add-on-description.value= e.g.: `Server command line tools: jboss-cli, add-user, elytron-tool`
org.wildfly.rule.add-on-fix-no-default-datasource=This layer will fix a missing default datasource
org.wildfly.rule.add-on-fix-no-default-datasource.value=None
org.wildfly.rule.add-on-fix-unbound-datasources=Fix an unbound datasource
org.wildfly.rule.add-on-fix-unbound-datasources.value=Env variable with `ITEM` value replaced by discovered JNDI path. e.g.: `JNDI env,MSSQLSERVER_JNDI=ITEM`
org.wildfly.rule.annotations=Expected annotations 
org.wildfly.rule.annotations.value=Comma separated list. Annotations are java package, full class or pattern ending with .*. e.g.: `org.eclipse.microprofile.config.inject`
org.wildfly.rule.bring-datasource=Brings a given datasource.
org.wildfly.rule.bring-datasource.value=The JNDI path of the datasource. e.g.: `java:jboss/datasources/ExampleDS`
org.wildfly.rule.class=A Java type.
org.wildfly.rule.class.value=Comma separated list. Annotations are java package, full class or pattern ending with .*. e.g.: `jakarta.ws.rs,jakarta.ws.rs.core`
org.wildfly.rule.configuration=The URL where to find yaml file containing the configuration (env variables to configure the layer).
org.wildfly.rule.configuration.value= e.g.: `https://raw.githubusercontent.com/jfdenise/wildfly-datasources-galleon-pack/layers_metadata/doc/mariadb/env.yaml`
org.wildfly.rule.expect-add-on-family=Family of add-on expected by the layer.
org.wildfly.rule.expect-add-on-family.value=e.g.: `messaging`
org.wildfly.rule.expected-file=Expect the existence of files or directories.
org.wildfly.rule.expected-file.value=An array of file paths. e.g.: `[/META-INF/beans.xml,/WEB-INF/beans.xml]`
org.wildfly.rule.hidden-if-org.wildfly.rule.not-expected-file-keycloak=Layer not included if the expected file is not found,
org.wildfly.rule.hidden-if-org.wildfly.rule.not-expected-file-keycloak.value=e.g.: `keycloak-client-saml` is hidden if `/WEB-INF/keycloak.json` is not present.
org.wildfly.rule.inclusion-mode=Layers automatically included if all its dependencies are found.
org.wildfly.rule.inclusion-mode.value=e.g.: `all-dependencies`
org.wildfly.rule.kind=A kind of layer
org.wildfly.rule.kind.value=Can be `base-layer`, an aggregator, `default-base-layer`, the default base layer to include in all cases, `metadata-only` a layer that doesn't bring feature, just metadata to help discovery. 
org.wildfly.rule.no-configuration-if-expected-file-oidc=Do not propose configuration if a file is found.
org.wildfly.rule.no-configuration-if-expected-file-oidc.value=e.g.: `/WEB-INF/oidc.json` is found, do not propose Cloud specific OIDC env variables.
org.wildfly.rule.no-configuration-if-org.wildfly.rule.expected-file-keycloak=Do not propose configuration if a file is found.
org.wildfly.rule.no-configuration-if-org.wildfly.rule.expected-file-keycloak.value=.g.: `/WEB-INF/keycloak.json` is found, do not propose Cloud specific SAML env variables.
org.wildfly.rule.profile-ha=Counter part for an HA layer. 
org.wildfly.rule.profile-ha.value=Inside `singleton-ha` layer, this rule references the `singleton-local`. It means that when `singleton-local` is discovered and ha profile is enabled, `singleton-ha` is included.
org.wildfly.rule.properties-file-match-mp-kafka-incoming=Match content inside an array of properties files.
org.wildfly.rule.properties-file-match-mp-kafka-incoming.value=e.g.: `[/META-INF/microprofile-config.properties,/WEB-INF/classes/META-INF/microprofile-config.properties],mp.messaging.incoming..connector,smallrye-kafka`
org.wildfly.rule.properties-file-match-mp-kafka-outgoing=Match content inside an array of properties files.
org.wildfly.rule.properties-file-match-mp-kafka-outgoing.value=e.g.: `[/META-INF/microprofile-config.properties,/WEB-INF/classes/META-INF/microprofile-config.properties],mp.messaging.outgoing..connector,smallrye-kafka`
org.wildfly.rule.properties-file-match-mp-kafka-property=Match content inside an array of properties files.
org.wildfly.rule.properties-file-match-mp-kafka-property.value=e.g.: `[/META-INF/microprofile-config.properties,/WEB-INF/classes/META-INF/microprofile-config.properties],mp.messaging.connector.smallrye-kafka.*`
org.wildfly.rule.properties-file-match-oas-filter=Match content inside an array of properties files.
org.wildfly.rule.properties-file-match-oas-filter.value=e.g.: `[/META-INF/microprofile-config.properties,/WEB-INF/classes/META-INF/microprofile-config.properties],mp.openapi.filter,*`
org.wildfly.rule.properties-file-match-oas-model-reader=Match content inside an array of properties files.
org.wildfly.rule.properties-file-match-oas-model-reader.value=e.g.: `[/META-INF/microprofile-config.properties,/WEB-INF/classes/META-INF/microprofile-config.properties],mp.openapi.model.reader,*`
org.wildfly.rule.xml-path=Lookup of XML path inside a set of files.
org.wildfly.rule.xml-path.value=Array of files followed by expected path and value. e.g.: `[/WEB-INF/.xml,/META-INF/.xml],/datasources/datasource/driver,h2`
org.wildfly.rule.xml-path-xa=Lookup of XML path inside a set of files.
org.wildfly.rule.xml-path-xa.value=Array of files followed by expected path and value. e.g.: `[/WEB-INF/.xml,/META-INF/.xml],/datasources/xa-datasource/driver,h2`
